#!/usr/bin/env python3

'''
A tool to query S3 buckets in a user-friendly way.

Usage:
    aws-s3-tree [--prefix=<prefix>] <bucket>

Arguments:
    aws-s3-tree             Print the tree of objects in a bucket
    --prefix=<prefix>       Only show items which match the prefix
'''


import sys
import boto3
import docopt


def get_bucket_objs(bucket, prefix=''):
    s3_client = boto3.client('s3')

    bucket_objs = []
    more_results = True
    continuation_token = None

    kwargs = {
        'Bucket': bucket,
        'Prefix': prefix,
    }

    while more_results:
        if continuation_token:
            kwargs['ContinuationToken'] = continuation_token

        res = s3_client.list_objects_v2(**kwargs)
        bucket_objs.extend(res.get('Contents', []))
        more_results = res.get('IsTruncated', False)
        continuation_token = res.get('NextContinuationToken', None)

    return bucket_objs


def get_obj_keys(bucket_objs):
    return [
        obj.get('Key') for obj in bucket_objs
    ]


def bucket_keys_to_tree(bucket_keys):
    tree = {}

    for key in bucket_keys:
        split_key = key.split('/')

        tree_segment = tree

        for path in split_key:
            if path not in tree_segment:
                tree_segment[path] = {}

            tree_segment = tree_segment[path]

    return tree


def print_tree(tree, depth=0):
    for key, vals in tree.items():
        print('{} |- {}'.format(''.join(['     '] * depth), key))

        if not vals:
            continue

        print_tree(vals, depth + 1)


def print_obj_tree(bucket, prefix=''):
    bucket_objs = get_bucket_objs(bucket, prefix=prefix)
    keys = get_obj_keys(bucket_objs)
    tree = bucket_keys_to_tree(keys)

    print_tree(tree)


def main(args):
    bucket = args.get('<bucket>')
    prefix = args.get('--prefix', '') or ''
    print_obj_tree(bucket, prefix=prefix)


if __name__ == '__main__':
    ARGS = docopt.docopt(__doc__)
    sys.exit(main(ARGS))
